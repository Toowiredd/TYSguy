# docker-compose.yml (continued)

  learning-strategies-service:
    build: ./Microservices/LearningStrategiesService
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASS=${RABBITMQ_DEFAULT_PASS}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - rabbitmq

  emotional-regulation-service:
    build: ./Microservices/EmotionalRegulationService
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASS=${RABBITMQ_DEFAULT_PASS}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      - rabbitmq

  response-aggregator-service:
    build: ./Microservices/ResponseAggregatorService
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASS=${RABBITMQ_DEFAULT_PASS}
      - HASURA_GRAPHQL_ENDPOINT=${HASURA_GRAPHQL_ENDPOINT}
      - HASURA_ADMIN_SECRET=${HASURA_ADMIN_SECRET}
    depends_on:
      - rabbitmq
      - hasura

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"

  api-gateway:
    build: ./Microservices/APIGateway
    ports:
      - "3000:3000"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASS=${RABBITMQ_DEFAULT_PASS}
      - REDIS_HOST=redis
      - JWT_SECRET=${JWT_SECRET}
      - HASURA_GRAPHQL_ENDPOINT=${HASURA_GRAPHQL_ENDPOINT}
      - HASURA_ADMIN_SECRET=${HASURA_ADMIN_SECRET}
    depends_on:
      - rabbitmq
      - redis
      - hasura

  user-authentication-service:
    build: ./Microservices/UserAuthenticationService
    ports:
      - "5000:5000"
    environment:
      - HASURA_GRAPHQL_ENDPOINT=${HASURA_GRAPHQL_ENDPOINT}
      - HASURA_ADMIN_SECRET=${HASURA_ADMIN_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - hasura

  task-scheduling-service:
    build: ./Microservices/TaskSchedulingService
    ports:
      - "5001:5001"
    environment:
      - HASURA_GRAPHQL_ENDPOINT=${HASURA_GRAPHQL_ENDPOINT}
      - HASURA_ADMIN_SECRET=${HASURA_ADMIN_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASS=${RABBITMQ_DEFAULT_PASS}
    depends_on:
      - hasura
      - rabbitmq

  notification-service:
    build: ./Microservices/NotificationService
    ports:
      - "5002:5002"
    environment:
      - HASURA_GRAPHQL_ENDPOINT=${HASURA_GRAPHQL_ENDPOINT}
      - HASURA_ADMIN_SECRET=${HASURA_ADMIN_SECRET}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASS=${RABBITMQ_DEFAULT_PASS}
      - EMAIL_FROM=${EMAIL_FROM}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    depends_on:
      - hasura
      - rabbitmq

  hasura:
    image: hasura/graphql-engine:v2.19.0
    ports:
      - "8080:8080"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: ${POSTGRES_URL}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
    depends_on:
      - postgres

  postgres:
    image: postgres:13
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
